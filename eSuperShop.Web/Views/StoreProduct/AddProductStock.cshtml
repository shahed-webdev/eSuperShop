@using eSuperShop.Repository
@model ProductDetailsModel

@{
    ViewData["Title"] = "Add Product Stock";
    Layout = "_SellerLayout";
}

@section Styles{
    <style>
        .productImage img {
            width: 100px;
            margin: 5px;
            border-radius: 3px;
        }
    </style>
}


<div class="m-md-3">
    <h4 class="page-header mb-3">Add Product Stock</h4>
    <div class="row">
        <div class="col-xl-7 mb-3">
            <div class="card card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h4 class="font-weight-bold mb-0">
                            @Model.Name
                            <small class="text-muted" style="text-decoration: line-through">৳@Model.OldPrice</small>
                            <small>৳@Model.Price</small>
                        </h4>
                        <p class="mb-0">@Model.ShortDescription</p>
                    </div>

                    <button id="btnPublish" data-publish="@Model.Published" type="button" class="btn btn-outline-@(Model.Published ? "success" : "danger") btn-rounded">
                        <i class="fas mr-1 fa-@(Model.Published ? "check" : "ban")"></i>
                        @(Model.Published ? "Published" : "Un-Published")
                    </button>
                </div>
                <hr />
                <p>
                    <strong>Category: </strong>@Model.CatalogInfo.CatalogName,
                    <strong>Brand: </strong>@Model.BrandInfo.Name,
                    <strong>Slug Url: </strong>@Model.SlugUrl
                </p>

                <div class="mt-3">@Html.Raw(@Model.FullDescription)</div>

                <div class="productImage mt-3">
                    @foreach (var img in Model.Blobs)
                    {
                        <img src="@img.BlobUrl" alt="@img.DisplayOrder">
                    }
                </div>
            </div>
        </div>

        <div class="col-xl-5 mb-3">
            <div id="attributeCard" class="card card-body mb-4">
                <form id="formAdd">
                    <h5 class="font-weight-bold mt-3 mb-0">PRODUCT STOCK</h5>
                    <em class="mb-3">Select Attribute And Add Product Quantity</em>

                    @foreach (var value in Model.Attributes)
                    {
                        <div class="form-group">
                            <label>@value.KeyName</label>
                            <select name="AttributeValueId" class="form-control attributeSelect" required>
                                <option value="">[ SELECT ]</option>
                                @foreach (var item in value.Values)
                                {
                                    <option value="@item.ProductAttributeValueId">@item.Value</option>
                                }
                            </select>
                        </div>
                    }

                    <div class="form-group">
                        <label>Product Quantity</label>
                        <input type="number" name="Quantity" class="form-control" placeholder="Quantity" required>
                    </div>

                    <div class="form-group">
                        <label>Additional Price</label>
                        <input type="number" name="PriceAdjustment" class="form-control" placeholder="Additional Price">
                    </div>

                    <div class="form-group">
                        <input id="inputSubmit" type="submit" data-id="" value="Add Stock" class="btn btn-danger btn-md">
                        <input type="hidden" name="ProductId" value="@Model.ProductId">
                    </div>
                </form>

                <table class="table">
                    <thead>
                        <tr>
                            @foreach (var val in Model.QuantitySets.FirstOrDefault().AttributesWithValue)
                            {
                                <th><strong>@val.KeyName</strong></th>
                            }
                            <th><strong>Quantity</strong></th>
                            <th><strong>Additional Price</strong></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var head in Model.QuantitySets)
                        {
                            <tr>
                                @foreach (var val in head.AttributesWithValue)
                                {
                                    <td>@val.Value</td>
                                }
                                <td>@head.Quantity</td>
                                <td>৳@head.PriceAdjustment</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card card-body">
                <h5 class="font-weight-bold mt-3">PRODUCT SPECIFICATION</h5>

                <div class="list-group-flush mt-3">
                    @foreach (var item in Model.Specifications)
                    {
                        <div class="list-group-item d-flex flex-wrap justify-content-between align-items-center">
                            <strong class="flex-grow-1">@item.KeyName</strong>
                            <label>@item.Value</label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        //selectors
        const valueIds = document.getElementsByName("AttributeValueId");
        const attributeCard = document.getElementById("attributeCard");
        const formAdd = document.getElementById("formAdd");
        const btnPublish = document.getElementById("btnPublish");

        //on change attribute
        attributeCard.addEventListener("change", function(evt) {
            const element = evt.target;

            const onAttribute = element.classList.contains("attributeSelect");
            if (!onAttribute) return;

            const Ids = attributeIds(true);

            if (valueIds.length !== Ids.length) return;

            const model = {
                ProductId: @Model.ProductId,
                ProductAttributeValueIds: attributeIds(true)
            }

            disabledButton(true);

            $.ajax({
                url: "/StoreProduct/GetInsertedStock",
                type: "POST",
                data: model,
                success: function(response) {
                    if (response.IsSuccess) {
                        formAdd.Quantity.value = response.Data.Quantity;
                        formAdd.PriceAdjustment.value = response.Data.PriceAdjustment;
                        formAdd.inputSubmit.setAttribute("data-id", response.Data.ProductQuantitySetId);
                    } else {
                        formAdd.Quantity.value = "";
                        formAdd.PriceAdjustment.value = "";
                        formAdd.inputSubmit.setAttribute("data-id", "");
                    }

                    changeButton();
                    disabledButton(false);
                },
                error: function(err) {
                    console.log(err);
                    disabledButton(false);
                }
            });
        });

        //post
        formAdd.addEventListener("submit", function(evt) {
            evt.preventDefault();
            const id = formAdd.inputSubmit.getAttribute("data-id");

            disabledButton(true);

            if (id) {
                const updateModel = {
                    ProductQuantitySetId: +id,
                    Quantity: +formAdd.Quantity.value,
                    PriceAdjustment: +formAdd.PriceAdjustment.value
                }

                $.ajax({
                    url: "/StoreProduct/UpdateStock",
                    type: "POST",
                    data: updateModel,
                    success: function(response) {
                        console.log(response);
                        $.notify("Update Stock Successfully", "success", { position: "right" });
                        disabledButton(false);
                    },
                    error: function(err) {
                        console.log(err);
                        disabledButton(false);
                    }
                });

                return;
            }


            const model = {
                ProductId: @Model.ProductId,
                Quantity: +formAdd.Quantity.value,
                PriceAdjustment: +formAdd.PriceAdjustment.value,
                ProductQuantitySetAttribute: attributeIds(false)
            }

            $.ajax({
                url: "/StoreProduct/AddStock",
                type: "POST",
                data: model,
                success: function(response) {
                    console.log(response);
                    $.notify("Add Stock Successfully", "success", { position: "right" });
                    disabledButton(false);
                },
                error: function(err) {
                    console.log(err);
                    disabledButton(false);
                }
            });
        });

        //publish
        btnPublish.addEventListener("click", function() {
            const isPublished = this.getAttribute("data-publish").toLocaleLowerCase() === "true" ? true : false;
            const content = !isPublished ? `<i class="fas mr-1 fa-check"></i>Published` : `<i class="fas mr-1 fa-ban"></i>Un-Published`;
            this.disabled = true;

            $.ajax({
                url: "/StoreProduct/PublishedUpdate",
                type: "POST",
                data: { productId: @Model.ProductId, isPublished: !isPublished},
                success: response => {
                    this.disabled = false;

                    if (!response.IsSuccess) return;

                    this.innerHTML = content;
                    this.setAttribute("data-publish", !isPublished);

                    if (!isPublished) {
                        this.classList.remove("btn-outline-danger");
                        this.classList.add("btn-outline-success");
                    } else {
                        this.classList.remove("btn-outline-success");
                        this.classList.add("btn-outline-danger");
                    }
                },
                error: err => {
                    console.log(err);
                    this.disabled = false;
                }
            });
        });

        //get selected id
        function attributeIds(isArray) {
            const AttributeValueId = [];

            valueIds.forEach(id => {
                if (id.value)
                    isArray ? AttributeValueId.push(+id.value) : AttributeValueId.push({ ProductAttributeValueId: +id.value });
            });

            return AttributeValueId;
        }

        //change button state
        function changeButton() {
            const id = formAdd.inputSubmit.getAttribute("data-id");

            formAdd.inputSubmit.value = id ? "Update Stock" : "Add Stock";

            if (id) {
                formAdd.inputSubmit.value = "Update Stock";
                formAdd.inputSubmit.classList.remove("btn-danger");
                formAdd.inputSubmit.classList.add("btn-success");
            } else {
                formAdd.inputSubmit.value = "Add Stock";
                formAdd.inputSubmit.classList.add("btn-danger");
                formAdd.inputSubmit.classList.remove("btn-success");
            }
        }

        //disabled button
        function disabledButton(isLoading) {
            formAdd.inputSubmit.disabled = isLoading;
        }
    </script>
}
