@using eSuperShop.Repository
@model ProductAddModel

@{
    ViewData["Title"] = "Add Product";
    Layout = "_SellerLayout";
}

@section Styles{
    <link href="~/lib/imageUploader/src/image-uploader.min.css" rel="stylesheet"/>
    <style>
        fieldset { padding: .5rem; margin: 1rem 0; border: 1px solid #dee2e6; border-radius: .25rem; }
        fieldset legend { width: auto; padding: 0 5px; font-weight: bold; color: #484848; }
        .attImg { max-width: 150px }
        .remove { cursor: pointer}
    </style>
}


<div class="m-md-3">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h4 class="page-header">Add Product</h4>
            <a class="blue-text" href="/StoreProduct/ProductCategory"><i class="fal fa-long-arrow-left"></i> Back to Category</a>
        </div>
        <h5 id="categoryName" class="font-weight-bold">loading...</h5>
    </div>   

    <form data-ajax-url="/StoreProduct/AddProduct" data-ajax="true" data-ajax-method="POST" data-ajax-begin="onPostBegin" data-ajax-failure="onError" data-ajax-success="onPostSuccess" enctype="multipart/form-data">
        <div class="row">
            <div class="col-xl-8 col-md-7 mb-3">
                <div class="card card-body">
                    <h5 class="font-weight-bold mt-3">PRODUCT INFORMATION</h5>

                    <div class="form-row">
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputProductName">Product Name</label>
                                <input id="inputProductName" type="text" name="Name" class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputShortDescription">Short Description</label>
                                <input id="inputShortDescription" type="text" name="ShortDescription" class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputSlugUrl">Slug Url (allow: a-z, 0-9, -, %)</label>
                                <input id="inputSlugUrl" type="text" pattern="^[a-z0-9]+(?:-[a-z0-9%]+)*$" name="SlugUrl" class="form-control" required>
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputBrand">Product Brand</label>
                                <input id="inputBrand" type="text" class="form-control" autocomplete="off">
                                <input id="hiddenBrandId" type="hidden" name="BrandId">
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputOldPrice">Regular Price</label>
                                <input id="inputOldPrice" type="number" name="OldPrice" class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputPrice">Sale Price</label>
                                <input id="inputPrice" type="number" name="Price" class="form-control" required>
                            </div>
                        </div>
                    </div>
                    <div class="md-form">
                        <p class="mb-1 text-muted">Product Description</p>
                        <textarea id="inputFullDescription" name="FullDescription"></textarea>
                    </div>
                </div>
            </div>

            <div class="col-xl-4 col-md-5">
                <div class="card card-body mb-4">
                    <h5 class="font-weight-bold mt-3">PRODUCT ATTRIBUTE</h5>

                    <div class="md-form mb-0">
                        <label for="inputAttribute">Find Attribute</label>
                        <input id="inputAttribute" type="text" class="form-control">
                    </div>

                    <div id="fieldAttribute"></div>
                </div>

                <div class="card card-body mb-4">
                    <h5 class="font-weight-bold mt-3">PRODUCT SPECIFICATION</h5>
                    <div class="md-form mb-0">
                        <label for="inputSpecification">Find Specification</label>
                        <input id="inputSpecification" type="text" class="form-control">
                    </div>

                    <div id="fieldSpecification" class="list-group-flush mt-3"></div>
                </div>

                <div class="card card-body mb-3">
                    <h5 class="font-weight-bold mt-3">PRODUCT IMAGE</h5>
                    <div class="md-form">
                        <div class="input-images"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <input id="btnSubmit" type="submit" value="Add Product" class="btn btn-danger">
            <input id="hiddenCatalogId" type="hidden" name="CatalogId">

            <strong id="imageError" class="field-validation-error"></strong>
        </div>
    </form>   
</div>


@section Scripts{
    <partial name="_UnobtrusiveAjaxPartial"/>
    <script src="https://cdn.ckeditor.com/ckeditor5/22.0.0/classic/ckeditor.js"></script>
    <script src="~/lib/imageUploader/src/image-uploader.min.js"></script>

    <script>
        $(function() {
            getDetails();

            $('.input-images').imageUploader({
                imagesInputName: 'ProductImage',
                maxSize: 1 * 1024 * 1024,
                maxFiles: 10,
                extensions: ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp']
            });
        });

        //check product image added
        const imageError = document.querySelector("#imageError");
        const btnSubmit = document.getElementById("btnSubmit");

        //check image is uploaded
        function validateImage() {
            const inp = document.getElementsByName("ProductImage")[0];
            imageError.textContent = "";

            if (inp.files.length === 0) {
                imageError.textContent = "Minimum one Product Image required!";
                return false;
            }

            return true;
        }

        //post begin
        function onPostBegin() {
            const isValid = validateImage();;

            if (isValid) {
                btnSubmit.disabled = true;
                btnSubmit.value = "Submitting..";
            }

            return isValid;
        }

        //post error
        function onError(response) {
            btnSubmit.disabled = false;
            btnSubmit.value = "Add Product";

            imageError.textContent = response.responseText;
        }

        //post success
        function onPostSuccess(response) {
            btnSubmit.disabled = false;
            btnSubmit.value = "Add Product";

            if (response.IsSuccess)
                location.href = `/StoreProduct/AddProductStock/${response.Data}`;
        }

        //rich text editor
        const textArea = document.querySelector('#inputFullDescription');
        ClassicEditor.create(textArea).catch(error => console.error(error));

        const catalogId = @Context.Request.RouteValues["id"];

        //brand
        const inputBrand = document.getElementById("inputBrand");
        const hiddenBrandId = document.getElementById("hiddenBrandId");
        hiddenBrandId.value = "";
        inputBrand.addEventListener('input', function() { hiddenBrandId.value = ""; });


        //Brand autocomplete
        $('#inputBrand').typeahead({
            minLength: 1,
            displayText: function(item) {
                return item.Name;
            },
            afterSelect: function(item) {
                this.$element[0].value = item.Name;
            },
            source: function(request, result) {
                $.ajax({
                    url: "/StoreProduct/FindBrand",
                    data: { catalogId, name: request },
                    success: function(response) { result(response); },
                    error: function(err) { console.log(err) }
                });
            },
            updater: function(item) {
                hiddenBrandId.value = item.BrandId;
                return item;
            }
        });


        //** Attribute ****// 
        const allAttributes = [];
        $('#inputAttribute').typeahead({
            minLength: 1,
            displayText: function(item) {
                return item.KeyName;
            },
            afterSelect: function(item) {
                this.$element[0].value = '';
            },
            source: function(request, result) {
                $.ajax({
                    url: "/StoreProduct/FindAttribute",
                    data: { catalogId, name: request },
                    success: function(response) { result(response); },
                    error: function(err) { console.log(err) }
                });
            },
            updater: function(item) {
                appendAttribute(item);
                return item;
            }
        });


        //add new attribute
        function appendAttribute(attribute) {
            const isExist = allAttributes.some(obj => obj.AttributeId === attribute.AttributeId);
            if (isExist) {
                alert(`${attribute.KeyName} already added`);
                return;
            }

            allAttributes.push(attribute);

            const fieldAttribute = document.getElementById("fieldAttribute");
            const fieldset = document.createElement("fieldset");
            fieldset.className = "fieldset";

            fieldset.innerHTML = `
                      <div class="mb-3">
                        <div class="form-check form-check-inline">
                            <strong>Display:</strong>
                        </div>
                        <div class="form-check form-check-inline">
                            <input type="radio" class="form-check-input" id="${attribute.AttributeId}-1" value="Text" checked>
                            <label class="form-check-label" for="${attribute.AttributeId}-1">Text</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input type="radio" class="form-check-input" id="${attribute.AttributeId}-2" value="Image">
                            <label class="form-check-label" for="${attribute.AttributeId}-2">Image</label>
                        </div>
                    </div>

                    <input class="hiddenAttributeId" type="hidden" value="${attribute.AttributeId}" />
                    <legend>${attribute.KeyName}</legend>

                    <div class="value-container d-flex justify-content-center align-items-center">
                        <div class="md-form m-0"><input type="text" class="attText form-control" placeholder="Attribute Text" required></div>
                        <input class="attImg" type="file" class="w-50 mx-1">
                        <div><input type="button" class="attribute-add-btn btn btn-sm btn-elegant btn-rounded" value="Add"></div>
                    </div>`;

            fieldAttribute.appendChild(fieldset);

            const allFieldsets = document.querySelectorAll("fieldset");
            allFieldsets.forEach((element, i) => {
                element.querySelectorAll('.form-check-input').forEach(radio => {
                    radio.name = `Attributes[${i}].DisplayType`;
                });

                element.querySelector('.hiddenAttributeId').name = `Attributes[${i}].AttributeId`;
                element.querySelector('.attText').name = `Attributes[${i}].Values[${i}].Value`;
                element.querySelector('.attImg').name = `Attributes[${i}].Values[${i}].AttributeImage`;
            });
        }

        //add attribute value click
        fieldAttribute.addEventListener('click', function(evt) {
            const element = evt.target;

            const onAddButton = element.classList.contains("attribute-add-btn");
            const onRemoveButton = element.classList.contains("attribute-remove-btn");

            const fieldset = element.parentElement.parentElement.parentElement;

            if (onAddButton) {
                //create new input and file
                const div = document.createElement("div");
                div.className = "value-container d-flex justify-content-center align-items-center my-3";
                div.innerHTML = `<div class="md-form m-0"><input type="text" class="attText form-control" placeholder="Attribute Text" required></div>
                                   <input class="attImg" type="file" class="w-50 mx-1">
                                   <div><input type="button" class="attribute-remove-btn btn btn-sm btn-danger btn-rounded" value="x">
                                 </div>`;

                fieldset.appendChild(div);

                applyIndex(element, false);
            }

            if (onRemoveButton) {
                applyIndex(element, true);
            }
        });

        //apply element index
        function applyIndex(element, isRemove) {
            if (isRemove) {
                element.parentElement.parentElement.remove();
            }

            const allFieldsets = document.querySelectorAll("fieldset");
            allFieldsets.forEach((child, index) => {
                child.querySelectorAll(".value-container").forEach((ele, i) => {
                    ele.querySelector('.attText').name = `Attributes[${index}].Values[${i}].Value`;
                    ele.querySelector('.attImg').name = `Attributes[${index}].Values[${i}].AttributeImage`;
                });
            });
        }


        //** Specification **//
        $('#inputSpecification').typeahead({
            minLength: 1,
            displayText: function(item) {
                return item.KeyName;
            },
            afterSelect: function(item) {
                this.$element[0].value = '';
            },
            source: function(request, result) {
                $.ajax({
                    url: "/StoreProduct/FindSpecification",
                    data: { catalogId, name: request },
                    success: function(response) { result(response); },
                    error: function(err) { console.log(err) }
                });
            },
            updater: function(item) {
                appendSpecification(item);
                return item;
            }
        });

        const fieldSpecification = document.getElementById("fieldSpecification");

        //add
        function appendSpecification(item) {
            const div = document.createElement('div');

            div.className = "list-group-item d-flex flex-wrap justify-content-between align-items-center";
            div.innerHTML = `<strong class="flex-grow-1">${item.KeyName}</strong>
                              <input type="hidden" class="specificationId" class="hiddenSpecificationId" value="${item.SpecificationId}">
                              <input type="text" class="value form-control form-control-sm mr-2 w-auto" placeholder="${item.KeyName}" required>
                              <i class="remove red-text fas fa-trash-alt"></i>`;
            fieldSpecification.appendChild(div);
            addFieldIndex();
        }

        //remove
        fieldSpecification.addEventListener('click', function(evt) {
            const element = evt.target;

            const onRemove = element.classList.contains('remove');
            if (!onRemove) return;

            element.parentElement.remove();
            addFieldIndex();
        });

        function addFieldIndex() {
            const listItem = document.querySelectorAll(".list-group-item");
            listItem.forEach((elem, i) => {
                elem.querySelector('.specificationId').name = `Specifications[${i}].SpecificationId`;
                elem.querySelector('.value').name = `Specifications[${i}].Value`;
            });
        }


        //get selected category
        function getDetails() {
            $.ajax({
                url: "/StoreProduct/CategoryDetails",
                data: { id: catalogId },
                success: function(response) {
                    if (response.IsSuccess) {
                        document.querySelector("#categoryName").textContent = response.Data.CatalogName;
                        document.getElementById("hiddenCatalogId").value = response.Data.CatalogId;
                    }
                },
                error: function(err) { console.log(err) }
            });
        }
    </script>
}

