@{
    ViewData["Title"] = "Add Brand";
    Layout = "_AdminLayout";
}

<div class="container">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <h4 class="page-header mb-3">Product Brand</h4>
            <div class="card card-body">
                <form>
                    <div class="text-center">
                        <img id="prevImage" alt="" />
                    </div>
                    <div class="md-form">
                        <label for="inputBrandName">Brand Name</label>
                        <input id="inputBrandName" type="text" class="form-control" required>
                    </div>
                    <div class="md-form">
                        <div class="file-field">
                            <div class="btn btn-outline-danger btn-rounded btn-sm float-left">
                                <span>Choose Logo<i class="fas fa-upload ml-3" aria-hidden="true"></i></span>
                                <input id="fileImage" name="image" type="file" accept="image/*">
                            </div>
                            <div class="file-path-wrapper">
                                <input id="filePath" class="file-path validate" type="text" placeholder="Upload Logo" autocomplete="off">
                            </div>
                        </div>
                        <span id="imageError" class="field-validation-error"></span>
                    </div>
                    <input type="submit" value="Add" class="btn btn-danger"/>

                    @Html.ValidationMessage("dbCustomError")
                </form>
            </div>
        </div>
    </div>
</div>


<!-- image crop modal -->
<div class="modal fade" id="cropImageModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-notify modal-danger" role="document">
        <div class="modal-content text-center">
            <div class="modal-header d-flex justify-content-center">
                <p class="heading">Crop Logo</p>
            </div>
            <div class="modal-body">
                <div id="upload-demo"></div>
            </div>
            <div class="modal-footer flex-center">
                <button id="btnCrop" type="button" class="btn  btn-danger waves-effect">CROP</button>
                <button class="btn btn-outline-danger" data-dismiss="modal">CANCEL</button>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        // Material Select Initialization
        $(function() {
            $('.mdb-select').materialSelect();
        });

        //global variable
        const imageError = $("#imageError");
        const previewImage = $('#prevImage');
        const cropImageModal = $('#cropImageModal');
        const btnCrop = $('#btnCrop');
        const cropImage = $('#upload-demo').croppie({
            viewport: { width: 160, height: 160 },
            boundary: { width: 180, height: 180 }
        });

        //set image file
        $('#fileImage').change(function(e) {
            imageError.text("");

            const pathInput = $('#filePath');

            const size = e.target.files[0].size / 1024 / 1024;
            const allowSize = 1;
            const regex = new RegExp("(.*?)\.(jpeg|jpg|png|webp)$");

            if (!(regex.test(e.target.value.toLowerCase()))) {
                e.target.value = "";
                pathInput.val("");

                imageError.text(`Please select correct file format`);
                return;
            }

            if (size > allowSize) {
                e.target.value = "";
                pathInput.val("");

                imageError.text(`image size must be less than ${allowSize}MB. your file size:${size.toFixed()} MB`);
                return;
            }

            pathInput.val(e.target.files[0].name);
            readFile(this);
        });

        //crop done
        btnCrop.on('click', function() {
            cropImage.croppie('result', { type: 'blob' }).then(function(res) {
                previewImage.attr('src', URL.createObjectURL(res)).addClass('img-thumbnail');
                console.log(res)

                cropImage.croppie('result', { type: 'blob', size: { width: 20 } }).then(function(res2) {
                    console.log(res2)
                });

                cropImageModal.modal('hide');
            });
        });

        //read file
        function readFile(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.readAsDataURL(input.files[0]);

                reader.onload = function(e) {
                    cropImage.croppie('bind', { url: e.target.result }).then(function() {
                        $('.cr-slider').attr({ 'min': 0.5000, 'max': 1.5000 });
                    });
                }

                cropImageModal.modal('show');
            }
        }
    </script>
}
