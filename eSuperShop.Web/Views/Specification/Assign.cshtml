@using eSuperShop.Repository
@model IEnumerable<ICatalogModel>
@{
    ViewData["Title"] = "Assign Specification";
    Layout = "_AdminLayout";
}

@section Styles{
    <style>
        .Specification-badge { background-color: #373434; padding: 2px 10px; border-radius: 5px; color: #e8e8e8; }
        .Specification-badge i { cursor: pointer }
        .Specification-badge i:hover { color: #f95151 }

        .parentCategory, .childCategory { transition: all .3s ease-in-out }

        .nested { padding-left:35px; display: block !important }
        .down { content: "\f107"; font-family: 'Font Awesome 5 Pro' }
    </style>   
}

<div class="container">
    <h4 class="page-header mb-3">Assign Specification</h4>

    <div class="card card-body">
        <div class="md-form m-0">
            <input id="inputSpecification" placeholder="Find Specification to assign" class="form-control" type="text"/>
            <span id="existError" class="field-validation-error"></span>
        </div>
        <div id="SpecificationContainer" class="d-flex flex-wrap align-items-center mb-3"></div>

        <div class="treeview">
            <ul class="list-group list-group-flush">
                @foreach (var catalog in Model)
                {
                    var isNoCategory = !catalog.SubCatalog.Any();

                <li class="list-group-item parentCategory">
                    <input type="checkbox" class="form-check-input" value="@catalog.CatalogId" id="c-@catalog.CatalogId" name="check-category">
                    <label class="form-check-label" for="c-@catalog.CatalogId"><strong>@catalog.CatalogName</strong></label>

                    @if (!isNoCategory)
                    {
                        <partial name="_SubCatalog" model="@catalog.SubCatalog" />
                    }
                </li>
                }
            </ul>
        </div>

        <div class="mt-3">
            <button id="btnAssign" class="btn btn-danger"><i class="far fa-check"></i> Assign</button>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        //Specification autocomplete
        $('#inputSpecification').typeahead({
            minLength: 1,
            displayText: function(item) {
                return item.KeyName;
            },
            afterSelect: function(item) {
                this.$element[0].value = ''
            },
            source: function(request, result) {
                $.ajax({
                    url: "/Specification/FindSpecification",
                    data: { name: request },
                    success: function(response) { result(response); },
                    error: function(err) { console.log(err) }
                });
            },
            updater: function(item) {
                appendSpecification(item);
                return item;
            }
        });

        //append Specification
        const SpecificationContainer = document.getElementById("SpecificationContainer");
        const SpecificationIds = [];

        function appendSpecification(item) {
            const existError = document.getElementById('existError');
            existError.textContent = "";
            const index = SpecificationIds.indexOf(item.SpecificationId);

            if (index !== -1) {
                existError.textContent = "Specification Already selected!";
                return;
            }

            SpecificationIds.push(+item.SpecificationId);


            const badge = `<div class="Specification-badge d-flex justify-content-between align-items-center mr-2 mb-2">
                <span class="mr-1">${item.KeyName}</span>
                <i id="${item.SpecificationId}" class="remove far fa-times-circle"></i>
            </div>`;

            SpecificationContainer.innerHTML += badge;
        }

        //remove Specification
        SpecificationContainer.addEventListener('click', function(evt) {
            const element = evt.target;
            const onRemove = element.classList.contains('remove');

            if (!onRemove) return;
            const id = +element.id;

            const index = SpecificationIds.indexOf(id);
            if (index > -1) {
                SpecificationIds.splice(index, 1);
                element.parentElement.remove();
            }
        });

        //selectors
        const btnAssign = document.getElementById("btnAssign");
        const listGroup = document.querySelector(".list-group");

        //checked previous checkbox
        const getPreviousSiblings = (element, action) => {
            while ((element = element.previousElementSibling)) {
                if (element.type === "checkbox") {
                    element.checked = action;
                    element.disabled = action;
                }
            }
        }

        //find parent element
        function findAncestor(element) {
            const parents = [];
            while ((element = element.parentElement) && (element.classList.contains('nested'))) {
                parents.push(element);
                console.log(element)
            }
            return parents;
        }

        //on checkbox click
        listGroup.addEventListener('click', function(evt) {
            const element = evt.target;
            const onCheck = element.classList.contains("form-check-input");

            if (!onCheck) return;

            const parents = findAncestor(element);
            parents.forEach(ele => {
                getPreviousSiblings(ele, element.checked);
            });
        });

        //assign button click
        btnAssign.addEventListener("click", function() {
            const checkboxes = document.getElementsByName('check-category');
            const catalogIds = [];

            for (let checkbox of checkboxes) {
                if (checkbox.checked) catalogIds.push(+checkbox.value);
            }

            if (!SpecificationIds.length) return;
            if (!catalogIds.length) return;

            const model = { SpecificationIds, CatalogIds: catalogIds }

            this.disabled = true;

            $.ajax({
                type: "POST",
                url: "/Specification/Assign",
                data: model,
                success: function (response) {
                    btnAssign.disabled = false;

                    if (response.IsSuccess) 
                        location.href = "/Specification/Add";
                },
                error: function(err) {
                    console.log(err);
                    btnAssign.disabled = false;
                }
            });
        });
    </script>
}
