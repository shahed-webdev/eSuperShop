@using eSuperShop.Repository
@model IEnumerable<ICatalogModel>
@{
    ViewData["Title"] = "Assign Brand";
    Layout = "_AdminLayout";
}

@section Styles{
    <style>
        .brand-badge { background-color: #373434; padding: 2px 10px; border-radius: 5px; color: #e8e8e8; }
        .brand-badge i { cursor: pointer }
        .brand-badge i:hover { color: #f95151 }

        .parentCategory, .childCategory { transition: all .3s ease-in-out }

        .nested { padding-left: 15px; display: block !important }
        .down { content: "\f107"; font-family: 'Font Awesome 5 Pro' }
    </style>   
}

<div class="container">
    <h4 class="page-header mb-3">Assigned in Category</h4>

    <div class="card card-body">
        <div class="treeview">
            <ul class="list-group list-group-flush">
                @foreach (var catalog in Model)
                {
                    var isNoCategory = !catalog.SubCatalog.Any();

                    <li class="list-group-item parentCategory">
                        <input disabled type="checkbox" class="form-check-input" @(catalog.IsExist?"checked":"") value="@catalog.CatalogId" id="@catalog.CatalogId" name="check-category">
                        <label class="form-check-label" for="@catalog.CatalogId"><strong>@catalog.CatalogName</strong></label>

                        @if (!isNoCategory)
                        {
                            <partial name="_SubCatalogAssigned" model="@catalog.SubCatalog"/>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        //selectors
        const btnAssign = document.getElementById("btnAssign");
        const listGroup = document.querySelector(".list-group");

        //checked previous checkbox
        const getPreviousSiblings = (element, action) => {
            while ((element = element.nextElementSibling)) {
                if (element.type === "checkbox") {
                    element.checked = action;
                    element.disabled = action;
                }
            }
        }

        //on checkbox click
        listGroup.addEventListener('click', function(evt) {
            const element = evt.target;
            const onCheck = element.classList.contains("form-check-input");

            if (!onCheck) return;
            getPreviousSiblings(element, element.checked);
        });

        //assign button click
        btnAssign.addEventListener("click", function() {
            const checkboxes = document.getElementsByName('check-category');
            const catalogIds = [];

            for (let checkbox of checkboxes) {
                if (checkbox.checked) catalogIds.push(+checkbox.value);
            }

            if (!brandIds.length) return;
            if (!catalogIds.length) return;

            const model = { BrandIds: brandIds, CatalogIds: catalogIds }

            this.disabled = true;

            $.ajax({
                type: "POST",
                url: "/Brand/Assign",
                data: model,
                success: function (response) {
                    btnAssign.disabled = false;

                    if (response.IsSuccess) 
                        location.href = "/Brand/Add";
                },
                error: function(err) {
                    console.log(err);
                    btnAssign.disabled = false;
                }
            });
        });
    </script>
}
