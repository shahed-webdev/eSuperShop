@using CloudStorage
@model ProductDetailsApprovedModel
@{
    ViewData["Title"] = "Pending Product Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var baseUrl = FileBuilder.BaseUrl();
}

@section Styles{
    <style>
        #product-image img { width: 100px; border-radius: 3px; }
        #product-image .deleteImg { cursor: pointer; color: red }
    </style>
}


<div class="m-md-3">
    <h4 class="page-header mb-3">Pending Product Details</h4>
    <div class="row">
        <div class="col-xl-7 mb-3">
            <form id="approveProduct">
                <div class="card card-body">

                    <input type="hidden" name="ProductId" value="@Model.ProductId">
                    <div class="md-form">
                        <label for="inputProductName">Product Name</label>
                        <input id="inputProductName" value="@Model.Name" type="text" name="Name" class="form-control" required>
                    </div>

                    <div class="md-form">
                        <label for="inputShortDescription">Short Description</label>
                        <input id="inputShortDescription" value="@Model.ShortDescription" type="text" name="ShortDescription" class="form-control" required>
                    </div>

                    <div class="md-form">
                        <label for="inputSlugUrl">Slug Url (allow: a-z, 0-9, -, %)</label>
                        <input id="inputSlugUrl" value="@Model.SlugUrl" type="text" pattern="^[a-z0-9]+(?:-[a-z0-9%]+)*$" name="SlugUrl" class="form-control" required>
                    </div>

                    <div class="form-row">
                        <div class="col-lg-4">
                            <div class="md-form">
                                <select searchable="Find Product Brand" name="BrandId" asp-for="@Model.BrandId" asp-items="ViewBag.Brands" class="mdb-select">
                                    <option value="">[ Select Product Brand ]</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputOldPrice">Regular Price</label>
                                <input id="inputOldPrice" value="@Model.OldPrice" type="text" class="form-control" disabled>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="md-form">
                                <label for="inputPrice">Sale Price</label>
                                <input id="inputPrice" value="@Model.Price" type="text" class="form-control" disabled>
                            </div>
                        </div>
                    </div>

                    <div class="md-form">
                        <p class="mb-1 text-muted">Product Description</p>
                        <textarea id="inputFullDescription" name="FullDescription">@Model.FullDescription</textarea>
                    </div>

                    <div class="md-form mt-4">
                        <label>Comment</label>
                        <input type="text" name="AdminComment" class="form-control">
                    </div>
                </div>

                <div class="mt-3">
                    <input name="btnSubmit" type="submit" value="Update and Approve Info" class="btn btn-danger">
                    <input data-toggle="modal" data-target="#modalReject" type="button" value="Reject" class="btn btn-outline-danger">
                </div>
            </form>
        </div>

        <div class="col-xl-5 mb-3">
            <div class="card card-body">
                <h5 class="font-weight-bold mt-3">PRODUCT IMAGE</h5>

                <form id="updateImage">
                    <div class="row align-items-center mb-3">
                        <div class="col">
                            <div class="md-form">
                                <div class="file-field">
                                    <div class="btn btn-outline-danger btn-rounded waves-effect float-left btn-sm">
                                        <span>Choose file<i class="fas fa-upload ml-3"></i></span>
                                        <input name="fileImage" type="file" required>
                                        <input name="ProductId" type="hidden" value="@Model.ProductId">
                                    </div>
                                    <div class="file-path-wrapper">
                                        <input class="file-path validate" type="text" placeholder="Upload your file">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <input name="btnSubmit" type="submit" value="Upload" class="btn btn-danger btn-md">
                        </div>
                    </div>
                </form>

                @{
                    var lastItem = Model.BlobFileNames.Length;
                }
                <ul id="product-image" class="pl-0 list-groupp list-group-flush">
                    @foreach (var img in Model.BlobFileNames)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <img src="@baseUrl/thumb_@img" alt="product image">
                            @if (lastItem > 1)
                            {
                                <i title="this delete is permanent" id="@img" class="deleteImg fas fa-trash"></i>
                            }
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>


<!--Modal: reject-->
<div class="modal fade" id="modalReject" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
     aria-hidden="true" data-backdrop="true">
    <div class="modal-dialog modal-notify modal-danger" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <p class="heading">Reject Product</p>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="white-text">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <form id="formReject">
                    <div class="md-form mb-5">
                        <input type="hidden" name="ProductId" value="@Model.ProductId">
                        <label for="inputDeleteReason">Reject Reason</label>
                        <textarea id="inputDeleteReason" class="md-textarea form-control" rows="1" name="DeleteReason" required></textarea>
                    </div>

                    <div class="text-center mb-3">
                        <button name="btnSubmit" type="submit" class="btn btn-danger">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script src="https://cdn.ckeditor.com/ckeditor5/22.0.0/classic/ckeditor.js"></script>
    <script>
        $(function() {
            $('.mdb-select').materialSelect();

            //set image file
            $('input[type="file"]').change(function(e) {
                const pathInput = e.target.parentElement.parentElement.querySelector(".file-path");
                const size = e.target.files[0].size / 1024 / 1024;
                const allowSize = 2;
                const regex = new RegExp("(.*?)\.(jpeg|jpg|png|webp)$");


                if (!(regex.test(e.target.value.toLowerCase()))) {
                    e.target.value = "";
                    pathInput.value = "";

                    $(pathInput).notify("Please select image file", { position: "bottom left" });
                    return;
                }

                if (size > allowSize) {
                    e.target.value = "";
                    pathInput.value = "";
                    $(pathInput).notify(`image size must be less than ${allowSize}MB. your file size:${size.toFixed()} MB`, { position: "bottom left" });
                    return;
                }

                let fileName = "";
                for (let i = 0; i <= e.target.files.length - 1; i++) {
                    fileName += i > 0 ? `, ${e.target.files[i].name}` : e.target.files[i].name;
                }

                pathInput.value = fileName;
            });
        });


        //rich text editor
        const textArea = document.querySelector('#inputFullDescription');
        ClassicEditor.create(textArea).catch(error => console.error(error));


        (function () {
            /**SLUG URL**/
            const inputSlugUrl = document.getElementById("inputSlugUrl");

            //on input slug url
            inputSlugUrl.addEventListener("change", function () {
                this.value = slugUrl.create(this.value);
            });


            const serializeForm = function(form) {
                const obj = {}, formData = new FormData(form);
                for (let key of formData.keys()) {
                    obj[key] = formData.get(key);
                }
                return obj;
            };

            //update and approve info
            const approveProduct = document.getElementById("approveProduct");
            approveProduct.addEventListener("submit", function(evt) {
                evt.preventDefault();

                const btn = this.btnSubmit;
                disabledBtn(btn, true);

                $.ajax({
                    type: "POST",
                    url: `/ApprovalInfo/UpdateProductInfo`,
                    data: serializeForm(this),
                    success: function(response) {
                        $.notify(response.Message, response.IsSuccess ? "success" : "error");

                        if (response.IsSuccess) {
                            location.href = "/ApprovalInfo/PendingProductInfo";
                            return;
                        }

                        disabledBtn(btn, false);
                    },
                    error: function(err) {
                        disabledBtn(btn, false);
                        console.log(err);
                    }
                });
            });

            //reject click
            const formReject = document.getElementById("formReject");
            formReject.addEventListener("submit", function (evt) {
                evt.preventDefault();

                const btn = this.btnSubmit;
                disabledBtn(btn, true);

                $.ajax({
                    type: "POST",
                    url: `/ApprovalInfo/RejectProductInfo`,
                    data: serializeForm(this),
                    success: function(response) {
                        $.notify(response.Message, response.IsSuccess ? "success" : "error");

                        if (response.IsSuccess) {
                            location.href = "/ApprovalInfo/PendingProductInfo";
                            return;
                        }

                        disabledBtn(btn, false);
                    },
                    error: function(err) {
                        disabledBtn(btn, false);
                        console.log(err);
                    }
                });
            });


            //add new image
            const updateImage = document.getElementById("updateImage");
            updateImage.addEventListener("submit", function(evt) {
                evt.preventDefault();

                const btn = this.btnSubmit;
                disabledBtn(btn, true);

                $.ajax({
                    url: "/ApprovalInfo/AddProductImage",
                    data: new FormData(this),
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    success: response=> {
                        disabledBtn(btn, false);
                        $.notify(response.Message, response.IsSuccess ? "success" : "error");

                        if (response.IsSuccess) {
                            addImageToList(response.Data);
                            this.reset();
                        }
                    },
                    error: function(err) {
                        disabledBtn(btn, false);
                        console.log(err);
                    }
                });
            });

            function addImageToList(file) {
                const productImageContainer = document.getElementById("product-image");
                const li = document.createElement("li");

                li.className = "list-group-item d-flex justify-content-between align-items-center";
                li.innerHTML = `<img src="@baseUrl/${file}" alt="product image"><i title="this delete is permanent" id="${file}" class="deleteImg fas fa-trash"></i>`

                productImageContainer.appendChild(li);
            }

            //delete image
            const productImage = document.getElementById("product-image");
            productImage.addEventListener("click", function(evt) {
                const element = evt.target;

                const onDelete = element.classList.contains("deleteImg");
                if (!onDelete) return;

                showSpinner(element, true);

                const body = { ProductId: @Model.ProductId, BlobFileName: element.id };
                $.ajax({
                    type: "POST",
                    url: `/ApprovalInfo/DeleteProductImage`,
                    data: body,
                    success: function (response) {
                        showSpinner(element, false);
                        $.notify(response.Message, response.IsSuccess ? "success" : "error");

                        if (response.IsSuccess)
                            element.parentElement.remove();

                    },
                    error: function(err) {
                        console.log(err);
                    }
                });
            });

            //btn disabled
            function disabledBtn(btn, isLoading) {
                btn.disabled = isLoading;
            }

            //show spinner
            function showSpinner(element, isShow) {
                if (isShow) {
                    element.classList.remove("fa-trash");
                    element.classList.add("fa-spinner", "fa-spin");
                } else {
                    element.classList.remove("fa-spinner", "fa-spin");
                    element.classList.add("fa-trash");
                }
            }
        })();
    </script>
}

