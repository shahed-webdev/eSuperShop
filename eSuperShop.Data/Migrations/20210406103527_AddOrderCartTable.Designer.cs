// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eSuperShop.Data;

namespace eSuperShop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210406103527_AddOrderCartTable")]
    partial class AddOrderCartTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5A71C6C4-9488-4BCC-A680-445A34C6E721",
                            ConcurrencyStamp = "5A71C6C4-9488-4BCC-A680-445A34C6E721",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "F73A5277-2535-48A4-A371-300508ADDD2F",
                            ConcurrencyStamp = "F73A5277-2535-48A4-A371-300508ADDD2F",
                            Name = "sub-admin",
                            NormalizedName = "SUB-ADMIN"
                        },
                        new
                        {
                            Id = "D2FF0467-0FC2-4F98-9B6A-168079D1D9E7",
                            ConcurrencyStamp = "D2FF0467-0FC2-4F98-9B6A-168079D1D9E7",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "D4D44AB1-65A6-47C5-AD00-49834787E486",
                            ConcurrencyStamp = "D4D44AB1-65A6-47C5-AD00-49834787E486",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "A0456563-F978-4135-B563-97F23EA02FDA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A0456563-F978-4135-B563-97F23EA02FDA",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDch3arYEB9dCAudNdsYEpVX7ryywa8f3ZIJSVUmEThAI50pLh9RyEu7NjGJccpOog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "A0456563-F978-4135-B563-97F23EA02FDA",
                            RoleId = "5A71C6C4-9488-4BCC-A680-445A34C6E721"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eSuperShop.Data.AllAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("AttributeId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("AllAttribute");
                });

            modelBuilder.Entity("eSuperShop.Data.AllBrand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LogoFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("BrandId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("AllBrand");
                });

            modelBuilder.Entity("eSuperShop.Data.AllSpecification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowFiltering")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("SpecificationId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("AllSpecification");
                });

            modelBuilder.Entity("eSuperShop.Data.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("AreaId");

                    b.HasIndex("RegionId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("eSuperShop.Data.Catalog", b =>
                {
                    b.Property<int>("CatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdditionalFeePercentageInDhaka")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("AdditionalFeePercentageOutDhaka")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BasicChargeInDhaka")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BasicChargeOutDhaka")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BasicMaxQuantityInDhaka")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("3");

                    b.Property<int>("BasicMaxQuantityOutDhaka")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("3");

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("DeliveryWithin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("5");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ParentCatalogId")
                        .HasColumnType("int");

                    b.Property<int>("ReturnWithin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("5");

                    b.Property<int?>("SeoId")
                        .HasColumnType("int");

                    b.Property<string>("SlugUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.HasKey("CatalogId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.HasIndex("ParentCatalogId");

                    b.HasIndex("SeoId")
                        .IsUnique()
                        .HasFilter("[SeoId] IS NOT NULL");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogAttribute", b =>
                {
                    b.Property<int>("CatalogAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.HasKey("CatalogAttributeId");

                    b.HasIndex("AssignedByRegistrationId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CatalogId");

                    b.ToTable("CatalogAttribute");
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogBrand", b =>
                {
                    b.Property<int>("CatalogBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.HasKey("CatalogBrandId");

                    b.HasIndex("AssignedByRegistrationId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatalogId");

                    b.ToTable("CatalogBrand");
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogShownPlace", b =>
                {
                    b.Property<int>("CatalogShownPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ShownPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("CatalogShownPlaceId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("CatalogShownPlace");
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogSpecification", b =>
                {
                    b.Property<int>("CatalogSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int");

                    b.HasKey("CatalogSpecificationId");

                    b.HasIndex("AssignedByRegistrationId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("CatalogSpecification");
                });

            modelBuilder.Entity("eSuperShop.Data.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Point")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("VerifiedPhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("eSuperShop.Data.CustomerAddressBook", b =>
                {
                    b.Property<int>("CustomerAddressBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("AlternativePhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerAddressBookId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddressBook");
                });

            modelBuilder.Entity("eSuperShop.Data.GeneralSetting", b =>
                {
                    b.Property<int>("GeneralSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderQuantityLimit")
                        .HasColumnType("int");

                    b.HasKey("GeneralSettingId");

                    b.ToTable("GeneralSetting");

                    b.HasData(
                        new
                        {
                            GeneralSettingId = 1,
                            OrderQuantityLimit = 5
                        });
                });

            modelBuilder.Entity("eSuperShop.Data.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveredOnUtc")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(([TotalAmount]-[Discount])+[ShippingCost])");

                    b.Property<int>("OrderSn")
                        .HasColumnName("OrderSN")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("eSuperShop.Data.OrderCart", b =>
                {
                    b.Property<int>("OrderCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantitySetId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderCartId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderCart");
                });

            modelBuilder.Entity("eSuperShop.Data.OrderList", b =>
                {
                    b.Property<int>("OrderListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CommissionAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql(" ((([Quantity] * [UnitPrice])*[CommissionPercentage])/100)");

                    b.Property<decimal>("CommissionPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantitySetId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([Quantity] * [UnitPrice])");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderListId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductQuantitySetId");

                    b.ToTable("OrderList");
                });

            modelBuilder.Entity("eSuperShop.Data.OrderShippingAddress", b =>
                {
                    b.Property<int>("OrderShippingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("AlternativePhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrderShippingAddressId");

                    b.HasIndex("AreaId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderShippingAddress");
                });

            modelBuilder.Entity("eSuperShop.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("SeoId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("SlugUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("SpecialPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("SpecialPriceEndDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SpecialPriceStartDateTimeUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("SeoId")
                        .IsUnique()
                        .HasFilter("[SeoId] IS NOT NULL");

                    b.HasIndex("VendorId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductAttribute", b =>
                {
                    b.Property<int>("ProductAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductAttributeId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductAttributeValue", b =>
                {
                    b.Property<int>("ProductAttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ProductAttributeValueId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductBlob", b =>
                {
                    b.Property<int>("ProductBlobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlobFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductBlobId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBlob");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductFaq", b =>
                {
                    b.Property<int>("ProductFaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTime?>("AnswerOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("QuestionOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("ProductFaqId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFaq");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductQuantitySet", b =>
                {
                    b.Property<int>("ProductQuantitySetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductQuantitySetId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductQuantitySet");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductQuantitySetAttribute", b =>
                {
                    b.Property<int>("ProductQuantitySetAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductAttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductQuantitySetId")
                        .HasColumnType("int");

                    b.HasKey("ProductQuantitySetAttributeId");

                    b.HasIndex("ProductAttributeValueId");

                    b.HasIndex("ProductQuantitySetId");

                    b.ToTable("ProductQuantitySetAttribute");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ReviewedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview");
                });

            modelBuilder.Entity("eSuperShop.Data.ProductSpecification", b =>
                {
                    b.Property<int>("ProductSpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ProductSpecificationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("ProductSpecification");
                });

            modelBuilder.Entity("eSuperShop.Data.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsInDhaka")
                        .HasColumnType("bit");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("RegionId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("eSuperShop.Data.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("DateofBirth")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Validation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RegistrationId");

                    b.ToTable("Registration");

                    b.HasData(
                        new
                        {
                            RegistrationId = 1,
                            CreatedOnUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            Type = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("eSuperShop.Data.Seo", b =>
                {
                    b.Property<int>("SeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.HasKey("SeoId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("SEO");
                });

            modelBuilder.Entity("eSuperShop.Data.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DisplayPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("SliderId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("eSuperShop.Data.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApprovedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(22, 2)")
                        .HasComputedColumnSql("([GrossSale]-((([Discount]+[Refund])+[Commission])+[Withdraw]))");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BankAccountTitle")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ChangedStoreBannerFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ChangedStoreLogoFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ChangedStoreTagLine")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ChequeImageFileName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("GrossSale")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChangedApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MobileBankingNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobileBankingType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NIdImageBackFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NIdImageFrontFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("NetSale")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(20, 2)")
                        .HasComputedColumnSql("([GrossSale]-([Discount]+[Refund]))");

                    b.Property<decimal>("Refund")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("ReturnAddress")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("ReturnAreaId")
                        .HasColumnType("int");

                    b.Property<string>("ReturnPhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ReturnPostcode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RoutingNumber")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("StoreAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("StoreAreaId")
                        .HasColumnType("int");

                    b.Property<string>("StoreBannerFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("StoreLogoFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StorePostcode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("StoreSlugUrl")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StoreTagLine")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StoreTheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TradeLicenseImageFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("VerifiedPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WarehouseAddress")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("WarehouseAreaId")
                        .HasColumnType("int");

                    b.Property<string>("WarehousePhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WarehousePostcode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Withdraw")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("VendorId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("ReturnAreaId");

                    b.HasIndex("StoreAreaId");

                    b.HasIndex("WarehouseAreaId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorCatalog", b =>
                {
                    b.Property<int>("VendorCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorCatalogId");

                    b.HasIndex("AssignedByRegistrationId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorCatalog");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorCertificate", b =>
                {
                    b.Property<int>("VendorCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorCertificateId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorCertificate");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorFollower", b =>
                {
                    b.Property<int>("VendorFollowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorFollowerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorFollower");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorProductCategory", b =>
                {
                    b.Property<int>("VendorProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangedImageFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ChangedName")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorProductCategoryId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorProductCategory");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorProductCategoryList", b =>
                {
                    b.Property<int>("VendorProductCategoryListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("VendorProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("VendorProductCategoryListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VendorProductCategoryId");

                    b.ToTable("VendorProductCategoryList");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorReview", b =>
                {
                    b.Property<int>("VendorReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ReviewedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorReviewId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorReview");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorStoreSlider", b =>
                {
                    b.Property<int>("VendorStoreSliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("IsApprovedByAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("VendorStoreSliderId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorStoreSlider");
                });

            modelBuilder.Entity("eSuperShop.Data.VendorWarehouse", b =>
                {
                    b.Property<int>("VendorWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("VendorWarehouseId");

                    b.HasIndex("AssignedByRegistrationId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("VendorWarehouse");
                });

            modelBuilder.Entity("eSuperShop.Data.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("WarehouseId");

                    b.HasIndex("CreatedByRegistrationId");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.AllAttribute", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("AllAttribute")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_AllAttribute_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.AllBrand", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("AllBrand")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_AllBrand_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.AllSpecification", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("AllSpecification")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_AllSpecification_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Area", b =>
                {
                    b.HasOne("eSuperShop.Data.Region", "Region")
                        .WithMany("Areas")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Area_Region")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Catalog", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("Catalog")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_Catalog_Registration")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Catalog", "ParentCatalog")
                        .WithMany("SubCatalog")
                        .HasForeignKey("ParentCatalogId")
                        .HasConstraintName("FK_Catalog_Catalog")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eSuperShop.Data.Seo", "Seo")
                        .WithOne("Catalog")
                        .HasForeignKey("eSuperShop.Data.Catalog", "SeoId")
                        .HasConstraintName("FK_Catalog_Seo");
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogAttribute", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "AssignedByRegistration")
                        .WithMany("CatalogAttribute")
                        .HasForeignKey("AssignedByRegistrationId")
                        .HasConstraintName("FK_CatalogAttribute_Registration")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.AllAttribute", "Attribute")
                        .WithMany("CatalogAttribute")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_CatalogAttribute_AllAttribute")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Catalog", "Catalog")
                        .WithMany("CatalogAttribute")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_CatalogAttribute_Catalog")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogBrand", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "AssignedByRegistration")
                        .WithMany("CatalogBrand")
                        .HasForeignKey("AssignedByRegistrationId")
                        .HasConstraintName("FK_CatalogBrand_Registration")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.AllBrand", "Brand")
                        .WithMany("CatalogBrand")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_CatalogBrand_AllBrand")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Catalog", "Catalog")
                        .WithMany("CatalogBrand")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_CatalogBrand_Catalog")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogShownPlace", b =>
                {
                    b.HasOne("eSuperShop.Data.Catalog", "Catalog")
                        .WithMany("CatalogShownPlace")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_CatalogShownPlace_Catalog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("CatalogShownPlace")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_CatalogShownPlace_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.CatalogSpecification", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "AssignedByRegistration")
                        .WithMany("CatalogSpecification")
                        .HasForeignKey("AssignedByRegistrationId")
                        .HasConstraintName("FK_CatalogSpecification_Registration")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Catalog", "Catalog")
                        .WithMany("CatalogSpecification")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_CatalogSpecification_Catalog")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.AllSpecification", "Specification")
                        .WithMany("CatalogSpecification")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_CatalogSpecification_AllSpecification")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Customer", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "Registration")
                        .WithMany("Customer")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Customer_Registration")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.CustomerAddressBook", b =>
                {
                    b.HasOne("eSuperShop.Data.Area", "Area")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_CustomerAddressBook_Area")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("CustomerAddressBook")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerAddressBook_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Order", b =>
                {
                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order_Customer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.OrderCart", b =>
                {
                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("OrderCart")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_OrderCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("OrderCart")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Product_OrderCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.ProductQuantitySet", "ProductQuantitySet")
                        .WithMany("OrderCart")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductQuantitySet_OrderCart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.OrderList", b =>
                {
                    b.HasOne("eSuperShop.Data.Order", "Order")
                        .WithMany("OrderList")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderList_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("OrderList")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderList_Product")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.ProductQuantitySet", "ProductQuantitySet")
                        .WithMany("OrderList")
                        .HasForeignKey("ProductQuantitySetId")
                        .HasConstraintName("FK_OrderList_ProductQuantitySet")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.OrderShippingAddress", b =>
                {
                    b.HasOne("eSuperShop.Data.Area", "Area")
                        .WithMany("OrderShippingAddress")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_OrderShippingAddress_Area")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Order", "Order")
                        .WithOne("OrderShippingAddress")
                        .HasForeignKey("eSuperShop.Data.OrderShippingAddress", "OrderId")
                        .HasConstraintName("FK_OrderShippingAddress_Order")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Product", b =>
                {
                    b.HasOne("eSuperShop.Data.AllBrand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Product_AllBrand")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eSuperShop.Data.Catalog", "Catalog")
                        .WithMany("Product")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_Product_Catalog")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Seo", "Seo")
                        .WithOne("Product")
                        .HasForeignKey("eSuperShop.Data.Product", "SeoId")
                        .HasConstraintName("FK_Product_SEO");

                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("Product")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Product_Vendor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductAttribute", b =>
                {
                    b.HasOne("eSuperShop.Data.AllAttribute", "Attribute")
                        .WithMany("ProductAttribute")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_ProductAttribute_AllAttribute")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("ProductAttribute")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductAttribute_Product")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductAttributeValue", b =>
                {
                    b.HasOne("eSuperShop.Data.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValue")
                        .HasForeignKey("ProductAttributeId")
                        .HasConstraintName("FK_ProductAttributeValue_ProductAttribute")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductBlob", b =>
                {
                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("ProductBlob")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductBlob_Product")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductFaq", b =>
                {
                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("ProductFaq")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ProductFaq_Customer")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("ProductFaq")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductFaq_Product")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductQuantitySet", b =>
                {
                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("ProductQuantitySet")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductQuantitySet_Product")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductQuantitySetAttribute", b =>
                {
                    b.HasOne("eSuperShop.Data.ProductAttributeValue", "ProductAttributeValue")
                        .WithMany("ProductQuantitySetAttribute")
                        .HasForeignKey("ProductAttributeValueId")
                        .HasConstraintName("FK_ProductQuantitySetAttribute_ProductAttributeValue")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.ProductQuantitySet", "ProductQuantitySet")
                        .WithMany("ProductQuantitySetAttribute")
                        .HasForeignKey("ProductQuantitySetId")
                        .HasConstraintName("FK_ProductQuantitySetAttribute_ProductQuantitySet")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductReview", b =>
                {
                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("ProductReview")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ProductReview_Customer")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductReview_Product")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.ProductSpecification", b =>
                {
                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("ProductSpecification")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductSpecification_Product")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.AllSpecification", "Specification")
                        .WithMany("ProductSpecification")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_ProductSpecification_AllSpecification")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Seo", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("Seo")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_SEO_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Slider", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("Slider")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_Slider_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Vendor", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "Registration")
                        .WithMany("Vendor")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Vendor_Registration");

                    b.HasOne("eSuperShop.Data.Area", "ReturnArea")
                        .WithMany("VendorReturn")
                        .HasForeignKey("ReturnAreaId")
                        .HasConstraintName("FK_Area_VendorReturnArea")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("eSuperShop.Data.Area", "StoreArea")
                        .WithMany("VendorStore")
                        .HasForeignKey("StoreAreaId")
                        .HasConstraintName("FK_Area_VendorStore")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("eSuperShop.Data.Area", "WarehouseArea")
                        .WithMany("VendorWarehouse")
                        .HasForeignKey("WarehouseAreaId")
                        .HasConstraintName("FK_Area_VendorWarehouse")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("eSuperShop.Data.VendorCatalog", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "AssignedByRegistration")
                        .WithMany("VendorCatalog")
                        .HasForeignKey("AssignedByRegistrationId")
                        .HasConstraintName("FK_VendorCatalog_Registration")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Catalog", "Catalog")
                        .WithMany("VendorCatalog")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_VendorCatalog_Catalog")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorCatalog")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorCatalog_Vendor")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorCertificate", b =>
                {
                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorCertificate")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorCertificate_Vendor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorFollower", b =>
                {
                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("VendorFollower")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_VendorFollower_Customer")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorFollower")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorFollower_Vendor")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorProductCategory", b =>
                {
                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorProductCategory")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorProductCategory_Vendor")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorProductCategoryList", b =>
                {
                    b.HasOne("eSuperShop.Data.Product", "Product")
                        .WithMany("VendorProductCategoryList")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_VendorProductCategoryList_Product")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.VendorProductCategory", "VendorProductCategory")
                        .WithMany("VendorProductCategoryList")
                        .HasForeignKey("VendorProductCategoryId")
                        .HasConstraintName("FK_VendorProductCategoryList_VendorProductCategory")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorReview", b =>
                {
                    b.HasOne("eSuperShop.Data.Customer", "Customer")
                        .WithMany("VendorReview")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_VendorReview_Customer")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorReview")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorReview_Vendor")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorStoreSlider", b =>
                {
                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorStoreSlider")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Vendor_VendorStoreSlider")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.VendorWarehouse", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "AssignedByRegistration")
                        .WithMany("VendorWarehouse")
                        .HasForeignKey("AssignedByRegistrationId")
                        .HasConstraintName("FK_VendorWarehouse_Registration")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Vendor", "Vendor")
                        .WithMany("VendorWarehouse")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_VendorWarehouse_Vendor")
                        .IsRequired();

                    b.HasOne("eSuperShop.Data.Warehouse", "Warehouse")
                        .WithMany("VendorWarehouse")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_VendorWarehouse_Warehouse")
                        .IsRequired();
                });

            modelBuilder.Entity("eSuperShop.Data.Warehouse", b =>
                {
                    b.HasOne("eSuperShop.Data.Registration", "CreatedByRegistration")
                        .WithMany("Warehouse")
                        .HasForeignKey("CreatedByRegistrationId")
                        .HasConstraintName("FK_Warehouse_Registration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
